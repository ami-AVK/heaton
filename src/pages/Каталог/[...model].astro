---
import sitemapJSON from '../../data/site.json'
import DynamicImage from '../../components/ImageDynamic.astro'
import Layout from '../../layouts/main.astro'
import BreadCrumbs from '../../components/BreadCrumbs.astro';
import Hero from '../../components/Hero.astro';
import NavBar from '../../components/NavBar.astro';
import Footer from '../../components/Footer.astro';
import Table from '../../components/Table_.astro';
import ProductData from '../../components/ProductData.astro';
// import RussianNouns from 'russian-nouns-js';

interface Link {
    url: string;
    text: string;
    links?: Link[]
}

interface Product {
    'Наименование': string;
    url:string
    [key: string]: any;
}
interface Category {
    ['Заголовок на главную']:string;
    ['Описание на главную']:string;
    ['Заголовок в карточку']:string;
    ['Описание в карточку']:string;
    [key: string]: any;
    products: Product[];
}
interface Sitemap {
    [key: string]: Category;
}
export async function getStaticPaths() {
    let paths=[] as any[]
    const sitemap = sitemapJSON as any as Sitemap;
    var uniqueCategories = Object.keys(sitemap);

    for (const key in sitemap as any) {
        const category = sitemap[key] as Category
        if (sitemap.hasOwnProperty(key)) {
            const products = category.products as Product[]

            
            // выделяем список моделей
            let models = [...new Set(products.map(product => product['Модель']))];


            // const URL_main = `${import.meta.env.BASE_URL}/`
            const URL_category = `${key}/`

            let path_ = {
                            params:{
                                model: `${URL_category}`
                            },
                            props:{
                                category: key,
                                otherCategories: uniqueCategories.filter(cat => cat !== key) as String[],
                                allModels: models as String[],
                            }};
                // console.log(path_)
                paths.push(structuredClone(path_));
            // создаем страницы для моделей
            models.forEach(model => {
                let path_ = {
                            params:{
                                model: `${URL_category}${model}`
                            },
                            props:{
                                model: model,
                                category: key,
                                otherCategories: uniqueCategories.filter(cat => cat !== key) as String[],
                                allModels: models as String[],
                            }};
                // console.log(path_)
                paths.push(structuredClone(path_));
            });
            
        }
    }
    return paths
}
const {category, model,otherCategories, allModels} = Astro.props;
const URL_main = `${import.meta.env.BASE_URL}/`;
const URL_category = `${URL_main}Каталог/${category}/`;
// const URL_model = `${URL_category}${model}`;
const URL_filterSetiing = ``;
const sitemap_ = sitemapJSON as any as Sitemap;

const categories = otherCategories.map((element:String) => (
    {
        url:`${URL_main}Каталог/${element}/`,
        text:element
    }
)) as Link[];

let models_all = allModels.map((element:String) => (
    {
        url:`${URL_category}${element}/`,
        text:element
    }
    )) as Link[];

let models = [] as Link[];

let products = [] as any[];

if(model){
    
    models = models_all.filter(mdl => mdl.text !== model);
    products = sitemap_[category].products.filter((product)=>{
        return product['Модель'] === model
    })
}
else{
    // const nouns = new RussianNouns.Engine();
    // const L = RussianNouns.createLemma;
    // const Gender = RussianNouns.Gender;
    // console.log(L({text: 'Радиатор', gender: Gender.MASCULINE}));
    // console.log(nouns.pluralize(category.split(' ')[0]))
    products = sitemap_[category].products;
}

// Заголовки для парсинга таблицы, на разные категории разные заголовки бывают
let TABLE_HEADERS =  ['Номенклатурный номер','Наименование'];
switch (category){
 case 'Стальные панельные радиаторы':
    TABLE_HEADERS = ['Номенклатурный номер','Наименование','Высота, мм','Длина, мм','Глубина, мм','Теплоотдача, Вт','Масса НЕТТО, кг','Объем, л','Тип']
    break
 case 'Напольные конвекторы':
    TABLE_HEADERS = ['Номенклатурный номер','Наименование','Высота, мм','Длина, мм','Глубина, мм','Теплоотдача, Вт','Масса НЕТТО, кг']
    break
 case 'Внутрипольные конвекторы':
    TABLE_HEADERS = ['Номенклатурный номер','Наименование','Высота, мм','Длина, мм','Глубина, мм','Теплоотдача, Вт','Масса НЕТТО, кг']
    break
}

const breadCrumbs = [{url:URL_main, text:"Главная"},{url:URL_category, text:category, links:categories}];
if(model){
    breadCrumbs.push({url:`${URL_category}${model}`, text:model, links:models});
}
const title = model? model:category;


---
<Layout title={title} description="Качественные панельные радиаторы от российского бренда" class="">
    <section class="container-center">
        <NavBar slot="navbar" class=" py-8"/>
        <BreadCrumbs slot="breadcrumbs" class='z-50' list={breadCrumbs}/> 
    </section>

    <div class="container-center py-16 flex gap-16">
        <div class="filter  flex flex-col shrink-0 basis-64 ">
            <div class="bg-neutral-200 rounded-2xl p-4">
                <div class="py-2">
                    <h3 class="font-extrabold">
                        Модель:
                    </h3>
                    <ul class="">
                        {
                            models_all.map((model)=>(
                                <li class="data-[current]:bg-primary text-neutral-700 px-2 py-1 my-1 hover:bg-primary hover:text-neutral-50 rounded-lg">
                                    <a href={model.url} class="block">{model.text}</a>
                                </li>
                                ))
                        }
                    </ul>
                </div>
                <div class="py-2">
                    <h3>
                        Высота
                    </h3>
                    <ul class="">
                        <li class="bg-primary text-neutral-50 p-2" data-current>400</li>
                        <li class="p-2">500</li>
                        <li class="p-2">600</li>
                        <li class="p-2">700</li>
                    </ul>
                </div>
                <div class="py-2">
                    <h3>
                        Длина
                    </h3>
                    <ul class="">
                        <li class="bg-primary text-neutral-50 p-2" data-current>400</li>
                        <li class="p-2">500</li>
                        <li class="p-2">600</li>
                        <li class="p-2">700</li>
                    </ul>
                </div>
            </div> 

        </div>

        <div class="grow">
            <ProductData excelFilePath="./src/data/Стальные панельные радиаторы/Compact (C)/11.xlsx"/>
            <Table products={products} headers={TABLE_HEADERS}/>
        </div>
        
    </div>
    <Footer class="mt-auto snap-center"/>
    
</Layout>