---
import sitemapJSON from '../../data/site.json'
import DynamicImage from '../../components/ImageDynamic.astro'
import Layout from '../../layouts/main.astro'
import BreadCrumbs from '../../components/BreadCrumbs.astro';
import Hero from '../../components/Hero.astro';
import NavBar from '../../components/NavBar.astro';
import Footer from '../../components/Footer.astro';
import Table from '../../components/Table_.astro';
import ProductData from '../../components/ProductData.astro';
import type { Link, Product, Category, Sitemap } from '../../types/common';
// import RussianNouns from 'russian-nouns-js';
import { getUniqueValues } from '../../utils/productUtils';
import EnhancedTable from '../../components/EnhancedTable/EnhancedTable.astro';
import TableFilters from '../../components/EnhancedTable/TableFilters.astro';

export async function getStaticPaths() {
    let paths=[] as any[]
    const sitemap = sitemapJSON as any as Sitemap;
    var uniqueCategories = Object.keys(sitemap);

    for (const key in sitemap as any) {
        const category = sitemap[key] as Category
        if (sitemap.hasOwnProperty(key)) {
            const products = category.products as Product[]

            
            // выделяем список моделей
            let models = [...new Set(products.map(product => product['Модель']))];


            // const URL_main = `${import.meta.env.BASE_URL}/`
            const URL_category = `${key}/`

            let path_ = {
                            params:{
                                model: `${URL_category}`
                            },
                            props:{
                                category: key,
                                otherCategories: uniqueCategories.filter(cat => cat !== key) as String[],
                                allModels: models as String[],
                            }};
                // console.log(path_)
                paths.push(structuredClone(path_));
            // создаем страницы для моделей
            models.forEach(model => {
                let path_ = {
                            params:{
                                model: `${URL_category}${model}`
                            },
                            props:{
                                model: model,
                                category: key,
                                otherCategories: uniqueCategories.filter(cat => cat !== key) as String[],
                                allModels: models as String[],
                            }};
                // console.log(path_)
                paths.push(structuredClone(path_));
            });
            
        }
    }
    return paths
}
const {category, otherCategories, allModels} = Astro.props;
let {model}  = Astro.props;
const URL_main = `${import.meta.env.BASE_URL}/`;
const URL_main_catalog = `${import.meta.env.BASE_URL}/Каталог/`;
const URL_category = `${URL_main}Каталог/${category}/`;
// const URL_model = `${URL_category}${model}`;
const URL_filterSetiing = ``;
const sitemap_ = sitemapJSON as any as Sitemap;

const categories = otherCategories.map((element:String) => (
    {
        url:`${URL_main}Каталог/${element}/`,
        text:element
    }
)) as Link[];

model = model?model:allModels[0];

let models_all = allModels.map((element:String) => (
    {
        url:`${URL_category}${element}/`,
        text:element,
        current: model==element
    }
    )) as Link[];

let models = [] as Link[];

let products = [] as any[];

if(model){
    
    models = models_all.filter(mdl => mdl.text !== model);
    products = sitemap_[category].products.filter((product)=>{
        return product['Модель'] === model
    })
}
else{
    // const nouns = new RussianNouns.Engine();
    // const L = RussianNouns.createLemma;
    // const Gender = RussianNouns.Gender;
    // console.log(L({text: 'Радиатор', gender: Gender.MASCULINE}));
    // console.log(nouns.pluralize(category.split(' ')[0]))
    // products = sitemap_[category].products;
    products = sitemap_[category].products
}
// Заголовки для парсинга таблицы, на разные категории разные заголовки бывают
let TABLE_HEADERS =  ['Номенклатурный номер','Наименование'];
// "Масса НЕТТО, кг": "3,1",
let tableColumns = [
    { value: 'Номенклатурный номер', sortable: false, filterable: false },
    { value: 'Наименование', sortable: false, filterable: false },
    { value: 'Высота, мм', sortable: true, filterable: true, unit: 'мм' },
    { value: 'Длина, мм', sortable: true, filterable: true, unit: 'мм' },
    { value: 'Теплоотдача, Вт', sortable: true, filterable: false, unit: 'Вт' }
    ];
switch (category){
 case 'Стальные панельные радиаторы':
    tableColumns = [
        // { value: 'Номенклатурный номер', sortable: false, filterable: false },
        { value: 'Наименование', sortable: false, filterable: false },
        { value: 'Тип', sortable: true, filterable: true},
        { value: 'Высота, мм', sortable: true, filterable: true, unit: 'мм' },
        { value: 'Длина, мм', sortable: true, filterable: true, unit: 'мм' },
        { value: 'Глубина, мм', sortable: true, filterable: true, unit: 'мм' },
        { value: 'Теплоотдача, Вт', sortable: true, filterable: false, unit: 'Вт' },
        { value: 'Объем, л', sortable: true, filterable: false, unit: 'л' },
        { value: 'Масса НЕТТО, кг', sortable: true, filterable: false, unit: 'кг' },
        { value: 'Подключение', sortable: true, filterable: true },
        { value: 'Исполнение', sortable: true, filterable: true },
        ];
    break
 case 'Напольные конвекторы':
    tableColumns = [
        { value: 'Наименование', sortable: false, filterable: false },
        { value: 'Высота, мм', sortable: true, filterable: true, unit: 'мм' },
        { value: 'Длина, мм', sortable: true, filterable: true, unit: 'мм' },
        { value: 'Ширина, мм', sortable: true, filterable: true, unit: 'мм' },
        { value: 'Теплоотдача, Вт', sortable: true, filterable: false, unit: 'Вт' },
        { value: 'Масса НЕТТО, кг', sortable: true, filterable: false, unit: 'кг' },
        ];
    break
 case 'Внутрипольные конвекторы':
    
    tableColumns = [
        { value: 'Наименование', sortable: false, filterable: false },
        { value: 'Высота, мм', sortable: true, filterable: true, unit: 'мм' },
        { value: 'Глубина, мм', sortable: true, filterable: true, unit: 'мм' },
        { value: 'Ширина, мм', sortable: true, filterable: true, unit: 'мм' },
        { value: 'Теплоотдача, Вт', sortable: true, filterable: false, unit: 'Вт' },
        { value: 'Вентилятор', sortable: true, filterable: true },
        ];
    break
}

const breadCrumbs = [{url:URL_main, text:"Главная"},{url:URL_category, text:category, links:categories}];
if(model){
    breadCrumbs.push({url:`${URL_category}${model}`, text:model, links:models});
}
const title = model? model:category;

// Get unique values for filters
    const heights = getUniqueValues(products, 'Высота, мм');
    const lengths = getUniqueValues(products, 'Длина, мм');
    const powers = getUniqueValues(products, 'Теплоотдача, Вт');


---
<Layout title={title} description="Качественные панельные радиаторы от российского бренда" class="min-h-screen ">
    <section class="container-center">
        <NavBar slot="navbar" class="py-8"/>
        <BreadCrumbs slot="breadcrumbs" class='z-50' list={breadCrumbs}/> 
    </section>

    <div class="max-w-screen-2xl px-8 mx-auto my-4 md:py-12 flex gap-16 flex-1 overflow-x-auto lg:overflow-visible">
        <div class="filter flex-none w-64 self-start sticky_ top-4 hidden lg:block">
            <TableFilters 
                category={category}
                filterableColumns={tableColumns.filter(col => col.filterable)}
                model={model}
            >
            </TableFilters>
        </div>

        <div class="flex-1 min-h-[40vh]">
            <div class="py-2 ">
                <h3 class="font-extrabold pl-2">Модель:</h3>
                <ul class="flex pl-2 gap-4">
                    {
                        models_all.map((model_)=>(
                                model_.current?
                                <li class=" bg-primary text-neutral-50 px-2 py-1 my-1 hover:bg-primary hover:text-neutral-50 rounded-lg">
                                    <a href={model_.url} class="block">{model_.text}</a>
                                </li>
                                :
                                <li class=" text-neutral-700 px-2 py-1 my-1 hover:bg-primary hover:text-neutral-50 rounded-lg">
                                    <a href={model_.url} class="block">{model_.text}</a>
                                </li>
                                
                                                           
                            ))
                    }
                </ul>
            </div>
            <EnhancedTable 
                products={products} 
                columns={tableColumns} 
                
                class="w-full"
                category={category}
                url={URL_main_catalog}
            />
        </div>
    </div>
    <Footer class="mt-auto"/>
</Layout>