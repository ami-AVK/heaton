---
import sitemapJSON from '../../data/site.json'
import type { Product, Category, Sitemap, Characteristic } from '../../types/common';
import DynamicImage from '../../components/ImageDynamic.astro'
import Layout from '../../layouts/main.astro'
import BreadCrumbs from '../../components/BreadCrumbs.astro';
import Hero from '../../components/Hero.astro';
import NavBar from '../../components/NavBar.astro';
import Footer from '../../components/Footer.astro';
import Drawing from '../../components/Drawing.astro';
import Contact from '../../components/Contact.astro';
import { findProductsByDimension, findSimilarProducts, getNavigationLinks } from '../../utils/productUtils';
import ProductCard from '../../components/ProductCard.astro';
import { Image } from "astro:assets"
import heater from "../../img/main_heaters_.webp"
import step from "../../img/step.webp"
import HF_Comfort from "../../img/HF_Comfort.webp"
import ImageDynamic from '../../components/ImageDynamic.astro';
import { Icon } from 'astro-icon/components';
import { getUniqueFieldValues } from '../../utils/productUtils';
import CharacteristicItem from '../../components/CharacteristicItem.astro';

export async function getStaticPaths() {
    let paths=[] as any[]
    const sitemap = sitemapJSON as any as Sitemap;
    for (const key in sitemap as any) {
        const category = sitemap[key] as Category
        if (sitemap.hasOwnProperty(key)) {
            const products = category.products as Product[]
            products.forEach(product => {
                let path_ = {
                            params:{
                                product: product.url
                            },
                            props:{
                                category: key,
                                url:product.url,
                                model:product['Модель'],
                                title: category['Заголовок в карточку'] as string,
                                description: category['Описание в карточку'],
                                product: product as Product,
                            }};
                paths.push(structuredClone(path_));
            });
            
        }
    }
    return paths
}

const {product,category,title,description,url,model} = Astro.props

let characteristics = [] as Characteristic[];
let extraCharacteristics = [] as any;
let pasportFile = "";
let documents = [] as any[];

const height = product['Высота, мм'];
let lenght = product['Длина, мм'];
const width = product['Ширина, мм'];
const depth = product['Глубина, мм'];
const power = product['Теплоотдача, Вт'];
const type = product['Тип']?product['Тип']:false;
let weight = product['Масса НЕТТО, кг']?product['Масса НЕТТО, кг']:false;
weight = weight=="-"?false:weight;

const lenghtName = {name:"Ширина:", shortname:'Ширина, мм'} as any;


let heightOptions, lengthOptions, widthOptions, depthOptions;
let heightProducts, lengthProducts,widthProducts, depthProducts;

let mainCharacteristicSet = {
    main:[
        {fullName:'Высота, мм',shortName:'Высота',className:'height'},
        {fullName:'Длина, мм',shortName:'Длина',className:'lenght'},
        {fullName:'Глубина, мм',shortName:'Глубина',className:'depth'}],
    };

switch (category){
 case 'Стальные панельные радиаторы':
    mainCharacteristicSet = {
        main:[
        {fullName:'Теплоотдача, Вт',shortName:'Теплоотдача',className:'power'},
        {fullName:'Высота, мм',shortName:'Высота',className:'height'},
        {fullName:'Длина, мм',shortName:'Длина',className:'length'},
        {fullName:'Глубина, мм',shortName:'Глубина',className:'depth'}],
    };
    heightOptions = getUniqueFieldValues(category, 'Высота, мм', model);
    lengthOptions = getUniqueFieldValues(category, 'Длина, мм', model);
    depthOptions = getUniqueFieldValues(category, 'Глубина, мм', model);
    
    heightProducts = findProductsByDimension(category, product, 'Высота, мм', heightOptions, model);
    lengthProducts = findProductsByDimension(category, product, 'Длина, мм', lengthOptions, model);
    depthProducts = findProductsByDimension(category, product, 'Глубина, мм', depthOptions, model);

    characteristics = [   
        {
            header: "Высота:",
            value: `${height} мм`,
            variants: heightProducts.map(p => ({ value: p['Высота, мм'], product: p }))
        },
        {
            header: "Длина:",
            value: `${lenght} мм`,
            variants: lengthProducts.map(p => ({ value: p['Длина, мм'], product: p }))
        },
        {
            header: "Глубина:",
            value: `${depth} мм`,
            variants: depthProducts.map(p => ({ value: p['Глубина, мм'], product: p }))
        },
        {
            header: "Мощность:",
            value: `${power} Вт`,
            variants: null,
        }
    ] as Characteristic[];

    extraCharacteristics = [
            {header:"Тип:", value:`${type}`},
            {header:"Подключение:", value:`${product['Подключение']}`},
            {header:"Исполнение:", value:`${product['Исполнение']}`},
        ];
    documents = [
        {type:"Технический паспорт", filepath:`${import.meta.env.BASE_URL}/pasports/pasport.pdf`},
        {type:"Гигиенический сертификат", filepath:`${import.meta.env.BASE_URL}/pasports/sanitary.pdf`},
        {type:"Сертификат соответсвия", filepath:`${import.meta.env.BASE_URL}/pasports/sertificate.pdf`},
    ]
    break
 case 'Напольные конвекторы':
    mainCharacteristicSet = {
            main:[
            {fullName:'Теплоотдача, Вт',shortName:'Теплоотдача',className:'power'},
                {fullName:'Высота, мм',shortName:'Высота',className:'height'},
                {fullName:'Длина, мм',shortName:'Длина',className:'length'},
                {fullName:'Ширина, мм',shortName:'Ширина',className:'width'}],
    };
 
    heightOptions = getUniqueFieldValues(category, 'Высота, мм', model);
    lengthOptions = getUniqueFieldValues(category, 'Длина, мм', model);
    widthOptions = getUniqueFieldValues(category, 'Ширина, мм', model);

    heightProducts = findProductsByDimension(category, product, 'Высота, мм', heightOptions, model);
    lengthProducts = findProductsByDimension(category, product, 'Длина, мм', lengthOptions, model);
    widthProducts = findProductsByDimension(category, product, 'Ширина, мм', widthOptions, model);
    
    characteristics = [   
        {
            header: "Высота:",
            value: `${height} мм`,
            variants: heightProducts.map(p => ({ value: p['Высота, мм'], product: p }))
        },
        {
            header: "Длина:",
            value: `${lenght} мм`,
            variants: lengthProducts.map(p => ({ value: p['Длина, мм'], product: p }))
        },
        {
            header: "Ширина:",
            value: `${width} мм`,
            variants: widthProducts.map(p => ({ value: p['Ширина, мм'], product: p }))
        },
        {
            header: "Мощность:",
            value: `${power} Вт`,
            variants: null,
        }
    ] as Characteristic[];

    extraCharacteristics = [
            // {header:"Тип:", value:`${type}`},
            // {header:"Подключение:", value:`${product['Подключение']}`},
            // {header:"Исполнение:", value:`${product['Исполнение']}`},
        ];
    documents = [
        {type:"Технический паспорт", filepath:`${import.meta.env.BASE_URL}/pasports/pasport_step.pdf`},
        {type:"Сертификат соответсвия", filepath:`${import.meta.env.BASE_URL}/pasports/РОСС RU С-RU.АГ16.В.00527-23.pdf`},
    ]

    break
 case 'Внутрипольные конвекторы':

    mainCharacteristicSet = {
                main:[
                    {fullName:'Теплоотдача, Вт',shortName:'Теплоотдача',className:'power'},
                    {fullName:'Высота, мм',shortName:'Высота',className:'height'},
                    {fullName:'Ширина, мм',shortName:'Ширина',className:'width'},
                    {fullName:'Глубина, мм',shortName:'Глубина',className:'depth'}],
        };
    heightOptions = getUniqueFieldValues(category, 'Высота, мм', model);
    widthOptions = getUniqueFieldValues(category, 'Ширина, мм', model);
    depthOptions = getUniqueFieldValues(category, 'Глубина, мм', model);

    heightProducts = findProductsByDimension(category, product, 'Высота, мм', heightOptions, model);
    widthProducts = findProductsByDimension(category, product, 'Ширина, мм', widthOptions, model);
    depthProducts = findProductsByDimension(category, product, 'Глубина, мм', depthOptions, model);
    

    characteristics = [   
        {
            header: "Высота:",
            value: `${height} мм`,
            variants: heightProducts.map(p => ({ value: p['Высота, мм'], product: p }))
        },
        {
            header: "Ширина:",
            value: `${lenght} мм`,
            variants: widthProducts.map(p => ({ value: p['Ширина, мм'], product: p }))
        },
        {
            header: "Глубина:",
            value: `${depth} мм`,
            variants: depthProducts.map(p => ({ value: p['Глубина, мм'], product: p }))
        },
        {
            header: "Мощность:",
            value: `${power} Вт`,
            variants: null,
        }
    ] as Characteristic[];
    // console.log(characteristics[1].variants);

  
    switch (model){
        case 'Comfort':
            documents = [
                {type:"Технический паспорт", filepath:`${import.meta.env.BASE_URL}/pasports/pasport_comfort.pdf`},
            ]
            extraCharacteristics = [];
            break;
        case 'Comfort Turbo':
            extraCharacteristics = [
                {header:"Вентилятор", value:`EC-двигатель`},
            ];
            documents = [
                    {type:"Технический паспорт", filepath:`${import.meta.env.BASE_URL}/pasports/pasport_comfort_turbo.pdf`},
                ]
            break;
    }
    break
}

if(weight){
    const w= {header:"Вес:", value:`${weight} кг`, variants:null} as any as Characteristic;
    characteristics.push(w);
}

const imagePath = `/src/images/products/${product['Изображение']}`
const imageAlt = `${category} Heaton ${product['Наименование']}`
const productName = product['Наименование']

const URL_main = `${import.meta.env.BASE_URL}/`
const URL_category = `${URL_main}Каталог/${category}/`
let URL_product = `${URL_category}${model}/${productName}`


const analogs = mainCharacteristicSet.main.map((element) => {
    const products = findSimilarProducts(category,product,element.fullName) as Product[];
    return {
        header: element.shortName,
        value: product[element.fullName],
        className: element.className,
        products: products,
        variants: products.map(p => ({ value: p[element.fullName], product: p }))
    }
});

let otherCategorys = getNavigationLinks().map((category)=>{
    category.url = `${import.meta.env.BASE_URL}${category.url}`
    return category
});
otherCategorys = otherCategorys.filter(elem => (
    elem.text != category
    ));
// console.log(otherCategorys);

---
<Layout title={title.replace("{Наименование}",productName)} description="Качественные панельные радиаторы от российского бренда" class="snap-y snap-mandatory">
    <div class="snap-center">
        <Hero class="min-h-svh">
            <NavBar slot="navbar" class="mx-auto container-center py-8"/>
            <BreadCrumbs slot="breadcrumbs" class='z-50' list={
                [{url:URL_main, text:"Главная"},{url:URL_category, text:category, links:otherCategorys},{url:URL_product, text:productName}]
                }/>

                <DynamicImage imagePath={imagePath} altText={imageAlt} slot="image" model={model} class='mx-auto w-auto h-auto max-h-[30vh] md:max-h-[70vh]'/>

            
            <Fragment slot="header">
                <h1 class="text-2xl sm:text-5xl font-black uppercase tracking-wider mt-4 sm:mt-8 md:mt-16 px-2 ">
                    <div class="text-sm sm:text-xl whitespace-nowrap leading-none font-normal">{title.replace("{Наименование}","")}</div>
                    <div class="leading-none">{productName}</div>
                </h1>
                <div class="flex flex-col md:items-start justify-between ">
                    <ul class="tracking-wider grid sm:grid-cols-2 md:grid-cols-1 md:gap-1 py-4 md:py-16 font-medium flex-1">
                        {
                            characteristics.map((element) =>(
                                <CharacteristicItem {...element} />
                            ))
                        }
                    </ul>
                    <div class="overflow-x-scroll ">
                        <ul class="text-base sm:text-2xl tracking-wider flex flex-nowrap sm:flex-row gap-2 md:gap-4 font-medium ">
                            {
                                extraCharacteristics.map((element:any) =>(
                                    <li class="bg-primary text-neutral-50 px-2 md:px-3 py-1 rounded-lg overflow-clip">
                                        <span class="text-xs sm:text-sm block font-normal">{element.header}</span>
                                        <span class="block font-black whitespace-nowrap leading-none sm:leading-none text-ellipsis">{element.value}</span>
                                    </li>
                                ))
                            }
                        </ul>
                    </div>
                    <div class=" overflow-x-auto my-6 md:my-6 text-sm">
                        <ul class="flex gap-2 max-w-full flex-wrap">
                            {documents.map((document) => (
                                <li class="text-sm shrink max-w-max lg:text-lg rounded-2xl bg-neutral-700/10 hover:bg-primary-10">
                                    <a href={document.filepath} class="p-1 px-3 flex items-center gap-4" download>
                                    <span class="text-balance whitespace-nowrap">{document.type}</span>
                                    <Icon name="File" class="size-4 lg:size-6 text-primary"/>
                                    </a>
                                </li>

                            ))}
                        </ul>
                    </div>
                </div>
            </Fragment>
    
        </Hero>
        <section class="text-4xl font-black uppercase container-center">
            <Drawing product={product} category={category}/>
        </section>
    </div>
    
    
   
    <section class="snap-center container-center mx-auto">
		<Contact/>
	</section>
    <section class="container-center snap-center min-h-[40vh] my-32">
        <div class="group" data-type="power">
            <div class="flex flex-col md:flex-row justify-between mb-4 md:mb-16">
                <h2 class="text-2xl sm:text-4xl font-black uppercase mb-2 sm:mb-8">Аналоги</h2>
                <ul class="flex gap-8 text-sm">
                    {
                    analogs.map((element) =>(
                    <li><button class="hover:bg-primary rounded-lg py-1 md:p-2 hover:text-neutral-50 bg-neutral-50 leading-tight" value={element.className}>Похожая {element.header}</button></li>
                        ))
                    }
                    <!-- <li><button class="hover:bg-primary rounded-lg py-1 md:p-2 hover:text-neutral-50 bg-neutral-50 leading-tight" value="power">Похожая мощность</button></li>
                    <li><button class="hover:bg-primary rounded-lg py-1 md:p-2 hover:text-neutral-50 bg-neutral-50 leading-tight" value="height">Похожая высота</button></li>
                    <li><button class="hover:bg-primary rounded-lg py-1 md:p-2 hover:text-neutral-50 bg-neutral-50 leading-tight" value="lenght">Похожая {lenghtName.name=="Ширина:"?"ширина":"длина"}</button></li> -->
                </ul>
            </div>
            {analogs.map((group) => (
                <ul class="hidden grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 xl:grid-cols-5 gap-6" class:list={[`group-data-[type='${group.className}']:grid`]}>
                    {
                        group.products.map((card) => (
                            <li>
                                <ProductCard product={card} category={category} compare={product} />
                            </li>
                        ))
                    }
                </ul>
            ))}
        </div>
    </section>
    <section class="container-center snap-center  min-h-[40vh] my-32">
        <h2 class="text-4xl font-black uppercase mb-16">Другие виды отопительного оборудования</h2>
        <ul class="flex flex-col gap-8 lg:gap-16 ">
			{
				[
					{
						"header": "Стальные панельные радиаторы",
						"image": "Стальные панельные радиаторы.webp",
						"text": "Обеспечьте свой дом равномерным и комфортным теплом с нашими стальными панельными радиаторами Heaton. Современный дизайн и высокая эффективность делают их идеальным выбором для любого интерьера. Наслаждайтесь уютом и экономией на отоплении!",
						"url": `${import.meta.env.BASE_URL}/Стальные панельные радиаторы`
					},
					{
						"header": "Напольные конвекторы",
						"image": "Напольные конвекторы.webp",
						"text": "Напольные конвекторы Heaton — это сочетание стиля и функциональности. Быстрое нагревание и мощная циркуляция воздуха обеспечат вам тепло даже в самых холодных условиях. Идеально подходят для офисов и жилых помещений.",
						"reverse":true,
						"url": `${import.meta.env.BASE_URL}/Напольные конвекторы`
					},
					{
						"header": "Внутрипольные конвекторы",
						"image": "Внутрипольные конвекторы.webp",
						"text": "Внутрипольные конвекторы Heaton — это незаметное и эффективное решение для отопления. Они сохраняют пространство и обеспечивают равномерное распределение тепла по всей комнате. Поддерживайте комфортный микроклимат без лишних элементов в интерьере.",
						"url": `${import.meta.env.BASE_URL}/Внутрипольные конвекторы`
					}
				].filter((e)=>e.header!=category).map((element) => (
					<li class="p-2 md:text-lg rounded-3xl relative flex flex-col md:flex-row items-center gap-4 md:gap-16 bg-neutral-50 group hover:bg-primary-10">
						<div class=" drop-shadow-primary-hard-sm md:drop-shadow-primary-hard-lg lg:drop-shadow-primary-hard drop order-1 relative scale-105" class:list={[{"md:order-2":element.reverse}]}>
							<ImageDynamic imagePath={element.image} altText='element.header' />
						</div>
						<div class="order-2 p-4 md:p-8" class:list={[{"md:order-1":element.reverse}]}>
							<h3 class="text-xl mb-6 md:mb-12 md:text-3xl uppercase tracking-wider font-black text-balance md:pl-4">{element.header}</h3>
							<p class="text-balance mb-6 md:mb-14 tracking-widest leading-normal md:leading-relaxed md:pl-4 ">{element.text}</p>
							<a class="px-4 my-2 py-2 text-lg md:text-xl rounded-lg text-neutral-50 bg-primary block text-center md:text-left md:inline-block" href={element.url}>Перейти в раздел</a>
						</div>
					</li>
				))
			}		
		</ul>
    </section>
    <Footer class="mt-auto snap-center"/>
    
</Layout>

<script>
    document.addEventListener('astro:page-load', () => {
        const buttons = document.querySelectorAll('button[value]');
        const container = document.querySelector('.group[data-type]');

        buttons.forEach(button => {
            button.addEventListener('click', () => {
                const value = button.getAttribute('value');
                if (container && value) {
                    container.setAttribute('data-type', value);
                }
            });
        });
    });
    document.addEventListener('astro:page-load', () => {
        const buttons = document.querySelectorAll('button[value]');
        const container = document.querySelector('.group[data-type]');

        buttons.forEach(button => {
            button.addEventListener('click', () => {
                const value = button.getAttribute('value');
                if (container && value) {
                    container.setAttribute('data-type', value);
                }
            });
        });
    });
</script>
