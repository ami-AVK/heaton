---
import fs from "fs";
import path from "path";
import { glob, globSync, globStream, globStreamSync, Glob } from "glob";
import ClientRouter from "astro/components/ClientRouter.astro";
import pkg from "papaparse";
import "../../../../styles/main.css";
import NavBar from "../../../../components/NavBar.astro";
import { Image } from "astro:assets"
import heater from "../../../../img/heater_main.webp"
import Footer from "../../../../components/Footer.astro";
import { console } from "inspector";
import Button from "../../../../components/Button.astro";
import Drawing from "../../../../components/Drawing.astro";
import ButtonFile from "../../../../components/ButtonFile.astro";

interface CsvTableProps {
  csvData: string;
}
function getNearests(parsedData:any, index:any, column:any) {
    const totalLength = parsedData.length;
    const result = [];

    // Определяем индексы для предыдущих и следующих элементов
    const prevIndices = [index - 2, index - 1];
    const nextIndices = [index + 1, index + 2];

    // Добавляем предыдущие элементы
    for (let i of prevIndices) {
        if (i >= 0 && i < totalLength && parsedData[i][column] !== null) {
            result.push(parsedData[i][column]);
        }
    }

    // Добавляем следующие элементы
    for (let i of nextIndices) {
        if (i >= 0 && i < totalLength && parsedData[i][column] !== null) {
            result.push(parsedData[i][column]);
        }
    }

    // Если результат меньше 4 элементов, добавляем дополнительные элементы
    while (result.length < 4) {
        if (result.length < 2) {
            // Добавляем следующие элементы, если их меньше 2
            for (let i = index + 3; i < totalLength; i++) {
                if (parsedData[i][column] !== null) {
                    result.push(parsedData[i][column]);
                    if (result.length >= 2) break;
                }
            }
        } else {
            // Добавляем предыдущие элементы, если их меньше 2
            for (let i = index - 3; i >= 0; i--) {
                if (parsedData[i][column] !== null) {
                    result.unshift(parsedData[i][column]);
                    if (result.length >= 4) break;
                }
            }
        }
    }

    return [result.slice(0, 2), result.slice(2)];
}

export async function getStaticPaths() {
    const { parse } = pkg;
    const collection = await glob(["./src/data/**/**/*.csv"]);
    var paths: any[]=[];
    collection.forEach(file =>{
        let path_ = {
            params:{
                category: file.split("/")[2],
                model: file.split("/")[3],
                type: file.split("/")[4].replace(".csv", ""),
                product: "prod",
            },
            props:{
                filePath: file.toString(),
                category: file.split("/")[2],
                model: file.split("/")[3],
                type: file.split("/")[4].replace(".csv", ""),
                image: `../../../${file.toString().replace(".csv", ".webp")}`,
                product:"хз",
                productData:{},
                productIndex:0,
            }};
        const csvFile = file;
        const csvFilePath = path.join(process.cwd(), csvFile);
        const csvData = fs.readFileSync(csvFilePath, "utf-8");
        const parsedData = parse(csvData, {
                                            header: true,
                                            dynamicTyping: true,
                                            skipEmptyLines: true,
                                            }).data as Record<string, any>[];

        parsedData.forEach((row,index)=>{
            if(row['Модель'] == null){ // headers
                true
            }
            else{
                path_.params.product = row['Модель'];
                path_.props.product = row['Модель'];
                path_.props.productData = row;
                path_.props.productIndex = index;
                paths.push(structuredClone(path_));
                // console.log(`Current url ${path_.params.category}/${path_.params.model}/${path_.params.type}/${path_.params.product}`)
            }
        });
        
    })
    // console.log(paths.length);
    return paths;
}
const {product,model,category,type,productData,productIndex} = Astro.props;

// getNearests
// console.log("______________________");
// const collection = await glob([`./src/productData/${category}/${model}/${type}.csv`]);
// console.log(collection[0]);
// console.log(`Current url ${import.meta.env.BASE_URL}/${Astro.url.pathname}`)
---
<html lang="ru">
	<head>
		<meta charset="utf-8" />
		<!-- <meta name="viewport" content="width=device-width" /> -->
		<meta name="viewport" content="width=device-width, height=device-height, minimum-scale=1.0, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href=`${import.meta.env.BASE_URL}/favicon.svg` />
    
		<!-- <meta name="generator" content={Astro.generator} /> -->
		<title>Heaton</title>
		<ClientRouter />
	</head>
    <body class="flex flex-col bg-neutral-100">
        <div class="">
            <div class="relative px-4 py-8 mx-auto container-center md:px-8 lg:px-16">
              <NavBar />
            </div>
        </div>
        <div class="flex w-full gap-4 px-4 mt-4 md:px-8 lg:px-16 container-center">
            {
            [
                {name:"Главная", url:`${import.meta.env.BASE_URL}/`, dropdown:""},
                {name:category, url:`${import.meta.env.BASE_URL}/${category}/${model}/${type}`, dropdown:""},
                {name:model, url:`${import.meta.env.BASE_URL}/${category}/${model}/${type}`, dropdown:""},
                {name:type, url:`${import.meta.env.BASE_URL}/${category}/${model}/${type}`, dropdown:""},
                {name:product, url:``, dropdown:""},
            ].map(
                    (link,index) => 
                    (
                        <a href={link.url} class="p-2 rounded-lg cursor-pointer min-h-min min-w-min hover:bg-neutral-50" class:list={[{"separator":index<4},{"pointer-events-none":index==4}]}>{link.name}</a>
                    )
                )
            }
        </div>
        <div class="flex gap-32 container-center my-[10svh] items-center">
            <div class="w-1/2"><Image alt="" src={heater}/></div>
            <div class="">
                <h1 class="text-4xl lg:text-5xl xl:text-6xl header-circle-xl">{product}</h1>
                <ul class="flex flex-col gap-4 py-12 text-2xl font-bold">
                    <li><span>{type[0]==1?`${type[0]} панель`:`${type[0]} панели`}</span></li>
                    <li><span>{type[1]==1?`${type[1]} рассеиватель`:type[1]==0?`Без рассеивателя`:`${type[1]} рассеивателя`}</span></li>
                    <li><span>{/^(10|20|30)$/.test(type)?"Гигиенический":"Решетка сверху"}</span></li>
                </ul>
                <div class="flex flex-wrap gap-4 mt-auto">
                    <ButtonFile size="20" text="Технический паспорт" icon="Document" type="download" link={`${import.meta.env.BASE_URL}/pasports/pasport.pdf`} class="bg-neutral-200"/>
                    <ButtonFile size="20" text="Сертификат соответсвия" icon="Sertificate" type="download" link={`${import.meta.env.BASE_URL}/pasports/sertificate.pdf`} class="bg-neutral-200"/>
                    <ButtonFile size="20" text="Гигиенический сертификат" icon="Sertificate" type="download" link={`${import.meta.env.BASE_URL}/pasports/sertificate.pdf`} class="bg-neutral-200"/>
                </div>
            </div>
        </div>
        <div class="z-50 flex items-start justify-start pb-16 container-center ">
            <div class="flex w-1/2">
                <div class="text-neutral-700">
                    <Drawing height={productData['Высота, мм']} width={productData['Длина, мм']}/>
                </div>
            </div>
            <div class="w-1/2"></div>
        </div>
        <Footer class="mt-auto"/>
    </body>
</html>