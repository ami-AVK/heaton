---
import { getCollection } from "astro:content";

import { Icon } from 'astro-icon/components';

// import CsvTable from '../../../components/Table.astro';
import fs from "fs";
import path from "path";
import { glob, globSync, globStream, globStreamSync, Glob } from "glob";
import NavBar from "../../../components/NavBar.astro";
import Table from "../../../components/Table.astro";
import CircleLink from "../../../components/CircleLink.astro";
import ProductData from "../../../components/ProductData.astro";
import Button from "../../../components/Button.astro";
import { ClientRouter } from "astro:transitions";
import "../../../styles/main.css";
import { Image } from "astro:assets"
import Footer from "../../../components/Footer.astro";
import ButtonFile from "../../../components/ButtonFile.astro";

const csvCollection = await glob(["./src/data/**/**/*.csv"]);

export async function getStaticPaths() {

  const collection = await glob(["./src/data/**/**/*.csv"]);
  const paths = collection.map((file) => ({
    params: {
      category: file.split("/")[2],
      model: file.split("/")[3],
      type: file.split("/")[4].replace(".csv", ""),
    },
    props: {
      filePath: file.toString(),
      category: file.split("/")[2],
      model: file.split("/")[3],
      type: file.split("/")[4].replace(".csv", ""),
      image: `../../../${file.toString().replace(".csv", ".webp")}`,
    },
  }));
  return paths;
}



// console.log(Astro.params.filePath);
const csvFile = Astro.props.filePath;
const category = Astro.props.category;
const model = Astro.props.model;
const type = Astro.props.type;
if (!csvFile) {
  throw new Error("CSV file not found");
}


const csvFilePath = path.join(process.cwd(), csvFile);
const jsonPath = path.join(process.cwd(), `${csvFile.substring(0,csvFile.lastIndexOf('.csv'))}_data.json`);
const pasport = path.join(process.cwd(), `${csvFile.substring(0,csvFile.lastIndexOf('.csv'))}.pdf`);

const csvData = fs.readFileSync(csvFilePath, "utf-8");
// const pathname = new URL(Astro.request.url);
const pathname = `${import.meta.env.BASE_URL}/${category}/${model}/${type}`;

// const imageFilePath = `${import.meta.env.BASE_URL}/${image.id}.webp`
// const image____file____path = `./src/data/${category}/${model}/${type}.webp`;
const images = import.meta.glob("../../../data/**.webp");
const imageFilePath = images[Astro.props.image.replace("src/","")]();

//  console.log();
// console.log(images[Astro.props.image.replace("src/","")]());

const mainLinks = [
                    {text:"Продукция",href:pathname},
                    {text:"Документация",href:`${import.meta.env.BASE_URL}/Документация`},
                    {text:"Где купить",href:`${import.meta.env.BASE_URL}/Где купить`},
                  ]

const sitemap = [
  {name:"Compact (C)",icon:"C", url:`${import.meta.env.BASE_URL}/Стальные панельные радиаторы/Compact (C)/11`, props:{connect:"Боковое подключение",type:"Стандартный"}},
  {name:"Ventil Compact (VC)",icon:"VC", url:`${import.meta.env.BASE_URL}/Стальные панельные радиаторы/Ventil Compact (VC)/11`, props:{connect:"Нижнее подключение",type:"Стандартный"}},
  {name:"Hygiene Compact (HC)",icon:"HC", url:`${import.meta.env.BASE_URL}/Стальные панельные радиаторы/Hygiene Compact (HC)/10`, props:{connect:"Боковое подключение",type:"Гигиенический"}},
  {name:"Hygiene Ventil Compact (HVC)",icon:"HVC", url:`${import.meta.env.BASE_URL}/Стальные панельные радиаторы/Hygiene Ventil Compact (HVC)/10`, props:{connect:"Нижнее подключение",type:"Гигиенический"}}];
const modeltypes = csvCollection.filter((file) => file.includes(`/${model}/`));
// console.log(csvCollection);
// console.log("_____");
---

<html lang="ru" class="bg-neutral-700">
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, height=device-height, minimum-scale=1.0, initial-scale=1.0"
    />
    <link rel="icon" type="image/svg+xml" href=`${import.meta.env.BASE_URL}/favicon.svg` />
    <!-- <meta name="generator" content={Astro.generator} /> -->
    <title>Heaton</title>
  </head>

  <body class="bg-neutral-100">
    <ClientRouter/>
    <!-- hero -->

    <div class="">
      <div class="relative px-4 py-8 mx-auto container-center md:px-8 lg:px-16">
        <NavBar />
      </div>
    </div>

    <div class="px-4 mx-auto mb-16 container-center lg:px-16">
      <!--  -->
      <div class="inline-flex flex-col items-start justify-start py-12 ">
        <h2 class="self-stretch pb-2 text-base font-bold leading-normal tracking-wider grow shrink basis-0 text-neutral-800">Стальные панельные радиаторы:</h2>
        <div class="inline-flex items-center justify-start gap-6">
          {
            sitemap.map((model_) => (
            <div class="flex items-start justify-center gap-1">
              <a href={model_.url} class="px-2 py-2 rounded-3xl justify-start items-center gap-1 flex hover:bg-gray-50 data-[current=true]:bg-secondary data-[current=true]:hover:bg-secondary" data-current={model_.name==model} >
                <Icon name={model_.icon} class="w-8 h-8 p-1 text-neutral-600"/>
                {/* <img class="w-16 h-16 rounded-xl" src="" /> */}
                <div class="text-sm font-normal leading-normal tracking-wide text-neutral-700 ">{model_.name}</div>
              </a>
            </div>
          ))
          }
        </div>
      </div>
      <!--  -->
      <div class="flex-col items-start justify-start ">
        <div class="self-stretch justify-start items-start gap-2.5 flex flex-col md:flex-row">
          <div
            class="flex self-stretch grow shrink basis-0 flex-col gap-2.5 pb-8"
          >
            <div class="self-stretch md:min-w-64">
              <Image src={imageFilePath as any} alt="" class="rounded-3xl"/>
            </div>
          </div>
          <div
            class="md:w-1/2 p-8 rounded-3xl flex-col justify-start items-start gap-2.5 inline-flex bg-neutral-50"
          >
            <div
              class="flex flex-col items-start self-stretch justify-start gap-6 text-neutral-800"
            > <h1 class="text-4xl header-circle-lg">Heaton {model}</h1>
              <ProductData excelFilePath="./src/data/Стальные панельные радиаторы/Compact (C)/11.xlsx"/>
              <div class="flex flex-wrap gap-4 mt-auto">
                <ButtonFile size="20" text="Технический паспорт" icon="Document" type="download" link={`${import.meta.env.BASE_URL}/pasports/pasport.pdf`} class="bg-neutral-200"/>
                <ButtonFile size="20" text="Сертификат соответсвия" icon="Sertificate" type="download" link={`${import.meta.env.BASE_URL}/pasports/sertificate.pdf`} class="bg-neutral-200"/>
                <ButtonFile size="20" text="Гигиенический сертификат" icon="Sertificate" type="download" link={`${import.meta.env.BASE_URL}/pasports/sertificate.pdf`} class="bg-neutral-200"/>
              </div>
            </div>
          </div>
        </div>
      </div>
      <!--  -->
      <div class="flex flex-col items-start justify-between px-8 pb-2 sm:items-center sm:flex-row sm:px-0">
        <h2 class="text-2xl">Характеристики</h2>
        <div class="flex items-center gap-12">
          <div class="flex items-center gap-4">
            <h3 class="font-bold ">Типы:</h3>
            <ul class="flex gap-3 py-4">
              {
                // modeltypes.map((file) => (
                //     <CircleLink fileName = `${file.substring(file.lastIndexOf("/")+1,file.lastIndexOf("."))}` 
                //     current={file.substring(file.lastIndexOf("/")+1,file.lastIndexOf("."))==type} 
                //     href={`${import.meta.env.BASE_URL}/${category}/${model}/${file.substring(file.lastIndexOf("/")+1,file.lastIndexOf("."))}`}
                //     />
                //   ))
            
                sitemap.forEach(link => {
                    <CircleLink fileName = {link.icon} 
                    current = {true}
                    href={link.url}
                    />
                })
              }
            </ul>
          </div>
          <div class="flex items-center gap-4">
            <h3 class="font-bold ">Модели:</h3>
            <ul class="flex gap-3 py-4">
              {
                modeltypes.map((file) => (
                    <CircleLink fileName = `${file.substring(file.lastIndexOf("/")+1,file.lastIndexOf("."))}` 
                    current={file.substring(file.lastIndexOf("/")+1,file.lastIndexOf("."))==type} 
                    href={`${import.meta.env.BASE_URL}/${category}/${model}/${file.substring(file.lastIndexOf("/")+1,file.lastIndexOf("."))}`}
                    />
                  ))
              }
            </ul>
          </div>
          
        </div>
      </div>
      <Table csvData={csvData} path_={pathname}/>
    </div>
    
    <Footer links={mainLinks}/>
  </body>
</html>
<script>
      function setCurrentRow(){
        try{
          const cid = window.location.href.substring(window.location.href.lastIndexOf("#")+1);
          const currentNN = document.getElementById(cid) as HTMLBaseElement;
          if(currentNN.parentElement){   
            currentNN.parentElement.setAttribute("data-current","");
          }
        }
        catch(e){
          
        }
      }
      document.addEventListener("astro:page-load", setCurrentRow);
      // document.addEventListener("click", function(){
      //   const cid = window.location.href.substring(window.location.href.lastIndexOf("#")+1);
      //   const currentNN = document.getElementById(cid) as HTMLBaseElement;
      //   try{
      //     currentNN.parentElement.setAttribute("data-current","");
      //   }
      //   catch(e){
          
      //   }
      //   console.log(window.location.href.substring(window.location.href.lastIndexOf("#")+1));
      //   console.log(currentNN.parentElement);
       
      // });
      document.addEventListener("astro:before-swap", () => {
          localStorage.____y = window.scrollY;
        //  sessionStorage.setItem("scrollPosition", window.scrollY.toString());
        //  console.log(localStorage.____y);
      });

      document.addEventListener("astro:after-swap", () => {
        // const scrollPosition = sessionStorage.getItem("scrollPosition");
        if (localStorage.____y) {
          // console.log(window.scrollY);
          window.scrollTo({
            // parseInt(scrollPosition, 10)
            top: localStorage.____y,
            behavior: "instant",
          });
          // console.log(localStorage.____y);
          localStorage.clear();
          // sessionStorage.removeItem("scrollPosition");
        }
      });
</script>
