---
import InputNumber from "./Inputs/InputNumber.astro";
import RadioGroup from "./Inputs/RadioGroup.astro";

// значения кнопок для радиогрупп
const heights = [
  { buttonText: "2,5 м", value: 2.5, checked: true },
  { buttonText: "3 м", value: 3 },
  { buttonText: "3,5 м", value: 3 },
];
const insulation = [
  { buttonText: "Плохая", value: 1.5 },
  { buttonText: "Средняя", value: 1.2, checked: true },
  { buttonText: "Хорошая", value: 1.0 },
];
const windows = [
  { buttonText: 1, value: 1 },
  { buttonText: 2, value: 2, checked: true },
  { buttonText: 3, value: 3 },
  { buttonText: 4, value: 4 },
  { buttonText: 5, value: 5 },
];
const glazing = [
  { buttonText: "Одинарное", value: 1.8 },
  { buttonText: "Двойное", value: 1.2, checked: true },
];

const { class: className } = Astro.props;
---

<section class="tracking-wide" class:list={className}>
  <div
    class="flex flex-col items-center w-full gap-10 py-10 sm:gap-16 sm:py-32 container-center text-neutral-600 min-h-svh"
  >
    <h2 class="text-3xl font-semibold md:text-6xl header-circle-sm md:header-circle-lg md:header-circle-xl">Подбор радиаторов</h2>
    <div
      class="flex flex-col items-center gap-8 px-16 justify-stretch md:flex-row md:items-stretch lg:gap-16 sm:px-0"
    >
      <div class="min-w-full px-16 sm:px-8 md:mt-8 md:w-auto md:px-0 sm:min-w-fit">
        <form class="flex flex-col gap-4 md:pr-8 sm:gap-8" id="calculator">
          <div class="relative ">
            <label for="area" class="block mb-1 text-xs font-bold text-gray-700 sm:mb-2 sm:text-sm"
              >Площадь помещения</label
            >
            <div class="flex items-center gap-4">
              <span
                class="left-0 block px-3 py-1 text-lg leading-none text-center rounded-lg top-8 text-neutral-700 min-w-20 whitespace-nowrap bg-neutral-50"
                ><span class="value will-change-contents">15</span> м²</span
              >
              <input
                type="range"
                id="area"
                name="area"
                min="2"
                max="100"
                class="w-full"
                value="70"
              />
            </div>
          </div>
          <div class="">
            <RadioGroup
              header="Высота помещения"
              name="height"
              class="flex-1"
              values={heights}
            />
          </div>
          <div class="">
            <RadioGroup
              header="Теплоизоляция"
              name="insulation"
              class="flex-1"
              values={insulation}
            />
          </div>
          <div class="">
            <RadioGroup
              header="Количество радиаторов"
              name="windows"
              class="flex-1"
              values={windows}
            />
          </div>
          <div class="">
            <RadioGroup
              header="Вид остекления"
              name="glazing"
              class="flex-1"
              values={glazing}
            />
          </div>
          <div class="relative ">
            <label for="area" class="block mb-1 text-xs font-bold text-gray-700 sm:mb-2 sm:text-sm"
              >Минимальная температура</label
            >
            <div class="flex items-center gap-4 ">
              <span
                class="left-0 block px-3 py-1 text-lg leading-none text-center rounded-lg top-8 text-neutral-700 min-w-20 whitespace-nowrap bg-neutral-50"
                ><span class="value will-change-contents">-5</span> °C</span
              >
              <input
                type="range"
                id="temperature"
                name="temperature"
                min="-40"
                max="20"
                class="w-full"
                value="-1"
              />
            </div>
          </div>
          <!-- <div class="mb-8">
                      <label for="minTemp" class="block mb-2 text-sm font-bold text-gray-700">Минимальная температура</label>
                      <div class="flex items-center gap-4">
                        <InputNumber/>
                        <input type="range" id="minTemp" name="minTemp" min="-50" max="15" class="w-full" value=-10>
                      </div>
                      
                    </div> -->
        </form>
      </div>
      <div class="p-4 mx-8 sm:p-8 sm:w-auto bg-secondary/30 rounded-3xl ">
        <div class="flex flex-col flex-wrap px-2 sm:gap-2 sm:flex-row sm:items-center"><span class="block mb-1 text-xs font-bold leading-none text-gray-700 sm:mb-0 sm:text-sm">Рекомендуемая общая мощность: </span><span id="totalPower" class="block px-2 text-lg rounded-full will-change-contents bg-secondary">1800 кВт</span></div>
        <h3 class="block my-6 mb-2 text-xs font-bold leading-none text-gray-700 sm:text-sm sm:px-2">Список подходящих радиаторов:</h3>
        <ul class="flex flex-col gap-4 text-xl" id="outputField">
          <li class="flex items-center gap-2 p-2 cursor-pointer sm:gap-8 rounded-xl hover:bg-neutral-100">
            <div class="flex flex-col items-start grow">
              <div class="font-black">C 33 300x400</div>
              <ul class="flex items-center gap-1">
                <li class="px-1 sm:px-2 py-0.5 text-xs rounded-full output_power_badge bg-secondary/30 power whitespace-nowrap">1239 Вт</li>
                <li class="px-1 sm:px-2 py-0.5 text-xs rounded-full output_power_badge bg-neutral-50/30 border border-neutral-300 connection">Нижнее</li>
                <li class="px-1 sm:px-2 py-0.5 text-xs rounded-full output_power_badge bg-neutral-50/30 border border-neutral-300 type empty:hidden"></li>
              </ul>
            </div>
            <div class="flex items-center gap-4 text-neutral-700/30">
              <div class="font-black">
                <span class="text-xl">x</span>
              </div>
              <div class="font-black ">
                <span class="text-4xl">2</span><span>&nbsp;шт</span>
              </div>
            </div>
          </li>
          <li class="flex items-center gap-8 p-2 cursor-pointer rounded-xl hover:bg-neutral-100">
            <div class="flex flex-col items-start grow">
              <div class="font-black">C 33 300x400</div>
              <ul class="flex items-center gap-1">
                <li class="px-1 sm:px-2 py-0.5 text-xs rounded-full output_power_badge bg-secondary/30 power whitespace-nowrap">1239 Вт</li>
                <li class="px-1 sm:px-2 py-0.5 text-xs rounded-full output_power_badge bg-neutral-50/30 border border-neutral-300 connection">Нижнее</li>
                <li class="px-1 sm:px-2 py-0.5 text-xs rounded-full output_power_badge bg-neutral-50/30 border border-neutral-300 type empty:hidden"></li>
              </ul>
            </div>
            <div class="flex items-center gap-4 text-neutral-700/30">
              <div class="font-black">
                <span class="text-xl">x</span>
              </div>
              <div class="font-black ">
                <span class="text-4xl">2</span><span>&nbsp;шт</span>
              </div>
            </div>
          </li>
          <li class="flex items-center gap-8 p-2 cursor-pointer rounded-xl hover:bg-neutral-100">
            <div class="flex flex-col items-start grow">
              <div class="font-black">C 33 300x400</div>
              <ul class="flex items-center gap-1">
                <li class="px-1 sm:px-2 py-0.5 text-xs rounded-full output_power_badge bg-secondary/30 power whitespace-nowrap">1239 Вт</li>
                <li class="px-1 sm:px-2 py-0.5 text-xs rounded-full output_power_badge bg-neutral-50/30 border border-neutral-300 connection">Нижнее</li>
                <li class="px-1 sm:px-2 py-0.5 text-xs rounded-full output_power_badge bg-neutral-50/30 border border-neutral-300 type empty:hidden">Гигиенический</li>
              </ul>
            </div>
            <div class="flex items-center gap-4 text-neutral-700/30">
              <div class="font-black">
                <span class="text-xl">x</span>
              </div>
              <div class="font-black ">
                <span class="text-4xl">2</span><span>&nbsp;шт</span>
              </div>
            </div>
          </li>

          <li class="flex items-center flex-1 gap-8 p-2 cursor-pointer rounded-xl hover:bg-neutral-100">
            <div class="flex flex-col items-start grow">
              <div class="font-black">C 33 300x400</div>
              <ul class="flex items-center gap-1">
                <li class="px-1 sm:px-2 py-0.5 text-xs rounded-full output_power_badge bg-secondary/30 power whitespace-nowrap">1239 Вт</li>
                <li class="px-1 sm:px-2 py-0.5 text-xs rounded-full output_power_badge bg-neutral-50/30 border border-neutral-300 connection">Нижнее</li>
                <li class="px-1 sm:px-2 py-0.5 text-xs rounded-full output_power_badge bg-neutral-50/30 border border-neutral-300 type empty:hidden">Гигиенический</li>
              </ul>
            </div>
            <div class="flex items-center gap-4 text-neutral-700/30">
              <div class="font-black">
                <span class="text-xl">x</span>
              </div>
              <div class="font-black ">
                <span class="text-4xl">2</span><span>&nbsp;шт</span>
              </div>
            </div>
          </li>
          
        </ul>
        <!-- RAW -->
        <!-- <div class="flex flex-col items-start justify-start gap-8 px-8 py-6 bg-neutral-50 rounded-2xl">
        
                    <div class="self-stretch text-neutral-700 text-base font-bold font-['Ubuntu'] uppercase leading-loose tracking-wider">Список подходящих радиаторов:</div>
                    <div class="flex flex-col items-center justify-start gap-2">
                      <div class="inline-flex items-start justify-start gap-4">
                        <div class="flex-col justify-center items-start gap-0.5 inline-flex">
                          <div class="w-40 text-neutral-700 text-base font-bold font-['Ubuntu'] leading-normal tracking-wider">C 33 300Х400</div>
                          <div class="text-neutral-400 text-xs font-normal font-['Ubuntu'] leading-3 tracking-tight">Боковое подключение</div>
                        </div>
                        <div class="text-neutral-700 text-base font-bold font-['Ubuntu'] leading-normal tracking-wider">х</div>
                        <div class="text-neutral-700 text-base font-bold font-['Ubuntu'] leading-normal tracking-wider">2 шт</div>
                      </div>
                      <div class="inline-flex items-start justify-start gap-4">
                        <div class="px-1 py-0.5 bg-neutral-100 rounded-lg flex-col justify-center items-start gap-0.5 inline-flex">
                          <div class="text-neutral-400 text-xs font-normal font-['Ubuntu'] leading-3 tracking-tight">Или</div>
                        </div>
                      </div>
                      <div class="inline-flex items-start justify-start gap-4">
                        <div class="flex-col justify-center items-start gap-0.5 inline-flex">
                          <div class="w-40 text-neutral-700 text-base font-bold font-['Ubuntu'] leading-normal tracking-wider">VC 33 300Х400</div>
                          <div class="text-neutral-400 text-xs font-normal font-['Ubuntu'] leading-3 tracking-tight">Нижнее подключение</div>
                        </div>
                        <div class="text-neutral-700 text-base font-bold font-['Ubuntu'] leading-normal tracking-wider">х</div>
                        <div class="text-neutral-700 text-base font-bold font-['Ubuntu'] leading-normal tracking-wider">2 шт</div>
                      </div>
                      <div class="inline-flex items-start justify-start gap-4">
                        <div class="px-1 py-0.5 bg-neutral-100 rounded-lg flex-col justify-center items-start gap-0.5 inline-flex">
                          <div class="text-neutral-400 text-xs font-normal font-['Ubuntu'] leading-3 tracking-tight">Или</div>
                        </div>
                      </div>
                      <div class="inline-flex items-start justify-start gap-4">
                        <div class="flex-col justify-center items-start gap-0.5 inline-flex">
                          <div class="w-40 text-neutral-700 text-base font-bold font-['Ubuntu'] leading-normal tracking-wider">HC 33 300Х400</div>
                          <div class="text-neutral-400 text-xs font-normal font-['Ubuntu'] leading-3 tracking-tight">Боковое подключение</div>
                          <div class="text-neutral-400 text-xs font-normal font-['Ubuntu'] leading-3 tracking-tight">Гигиенический</div>
                        </div>
                        <div class="text-neutral-700 text-base font-bold font-['Ubuntu'] leading-normal tracking-wider">х</div>
                        <div class="text-neutral-700 text-base font-bold font-['Ubuntu'] leading-normal tracking-wider">2 шт</div>
                      </div>
                      <div class="inline-flex items-start justify-start gap-4">
                        <div class="px-1 py-0.5 bg-neutral-100 rounded-lg flex-col justify-center items-start gap-0.5 inline-flex">
                          <div class="text-neutral-400 text-xs font-normal font-['Ubuntu'] leading-3 tracking-tight">Или</div>
                        </div>
                      </div>
                      <div class="inline-flex items-start justify-start gap-4">
                        <div class="flex-col justify-center items-start gap-0.5 inline-flex">
                          <div class="w-40 text-neutral-700 text-base font-bold font-['Ubuntu'] leading-normal tracking-wider">HVC 33 3200Х900</div>
                          <div class="text-neutral-400 text-xs font-normal font-['Ubuntu'] leading-3 tracking-tight">Нижнее подключение</div>
                          <div class="text-neutral-400 text-xs font-normal font-['Ubuntu'] leading-3 tracking-tight">Гигиенический</div>
                        </div>
                        <div class="text-neutral-700 text-base font-bold font-['Ubuntu'] leading-normal tracking-wider">х</div>
                        <div class="text-neutral-700 text-base font-bold font-['Ubuntu'] leading-normal tracking-wider">2 шт</div>
                      </div>
                    </div>
                  </div> -->
        <!--  -->
      </div>
    </div>
  </div>
</section>
<script>
  
const radiators = await fetchRadiators();

// Функция для загрузки данных о радиаторах с сервера
async function fetchRadiators() {

  const response = await fetch('/heaton/search_map_radiator_power.json'); // Замените на ваш URL
  if (!response.ok) {
    throw new Error('Fail to fetch heaters powers');
  }
  const data = await response.json();
  // console.log(`Fetched ${data.length}`);
  return data;
  }



  function calculateHeatLoss(
    area: number,
    height: number,
    insulationFactor: number,
    glazingFactor: number,
    minTemp: number
  ) {
    // console.log(area);
    // console.log(height);
    // console.log(insulationFactor);
    // console.log(glazingFactor);
    // console.log(minTemp);
    const heatLoss =
      area * height * insulationFactor * glazingFactor * (20 - minTemp);
    return heatLoss;
  }
  function initCalculator(form: HTMLFormElement) {
    const area = form.querySelector('input[name="area"]') as HTMLInputElement;
    const temperature = form.querySelector(
      'input[name="temperature"]'
    ) as HTMLInputElement;
    const insulation = form.querySelector(
      'input[name="insulation"]:checked'
    ) as HTMLInputElement;
    const windows = form.querySelector(
      'input[name="windows"]:checked'
    ) as HTMLInputElement;
    const glazing = form.querySelector(
      'input[name="glazing"]:checked'
    ) as HTMLInputElement;
    const height = form.querySelector(
      'input[name="height"]:checked'
    ) as HTMLInputElement;

    const heatLoss = calculateHeatLoss(
      parseFloat(area.value),
      parseFloat(height.value),
      parseFloat(insulation.value),
      parseFloat(glazing.value),
      parseFloat(temperature.value)
    );

    const event = new CustomEvent("calculatorFormHeatPower", {
          detail: {
            heat: heatLoss, heaters: parseInt(windows.value), // Элемент, который вы хотите передать
          },
          bubbles: true,
        });
    document.dispatchEvent(event);
    
    // console.log(`${heatLoss} Вт`);
    // console.log(
    //   `${Math.ceil(heatLoss / parseInt(windows.value))} Вт на каждый радиатор`
    // );
  }
  document.addEventListener("astro:page-load", () => {
    const form = document.getElementById("calculator") as HTMLFormElement;
    initCalculator(form);

    document.addEventListener("calculatorFormEvent", (e: any) => {
      initCalculator(form);
    });

    // Поиск радиаторов завершен
    document.addEventListener("heatersSearchComplete",(e: any) => {
      const outputField = document.getElementById("outputField") as HTMLUListElement;
      const heatersArray = e.detail.heaters;
      let totalInner = "";
      heatersArray.forEach((element:any,index:number)=>{
        console.log(element);
        totalInner+=
        `<li class="flex items-center gap-2 p-2 cursor-pointer sm:gap-8 rounded-xl hover:bg-neutral-100">
                    <a href="/heaton/${element['Ссылка']}" class="flex flex-col items-start grow">
                      <div class="font-black">${element['Наименование']}</div>
                      <ul class="flex items-center gap-1">
                        <li class="px-1 sm:px-2 py-0.5 text-xs rounded-full output_power_badge bg-secondary/30 power whitespace-nowrap">${element.power} Вт</li>
                        <li class="px-1 sm:px-2 py-0.5 text-xs rounded-full output_power_badge bg-neutral-50/30 border border-neutral-300 connection">${element.side?"Нижнее":"Боковое"}</li>
                        <li class="px-1 sm:px-2 py-0.5 text-xs rounded-full output_power_badge bg-neutral-50/30 border border-neutral-300 type empty:hidden">${element.hygiene?"Гигиенический":""}</li>
                      </ul>
                    </a>
                    <a class="flex items-center gap-4 text-neutral-700/30">
                      <div class="font-black">
                        <span class="text-xl">x</span>
                      </div>
                      <div class="font-black ">
                        <span class="text-4xl">2</span><span>&nbsp;шт</span>
                      </div>
                    </a>
          </li>`
      });
      
                  
        outputField.innerHTML = totalInner;
    });

    document.addEventListener("calculatorFormHeatPower", (e: any) => {
      const totalPower = document.getElementById("totalPower") as HTMLSpanElement;

      totalPower.textContent = `${parseInt(e.detail.heat)} Вт`;
      searchHeaters(parseInt(e.detail.heat));
      // console.log(`${e.detail.heat} Вт`);
    });

    const rangeInputs = document.querySelectorAll('input[type="range"]');

    let timeout = setTimeout(function () {}, 10);

    function handleInputChange(e: any) {
      let target = e.target;
      if (e.target.type !== "range") {
        target = document.getElementById("range");
      }
      const min = target.min;
      const max = target.max;
      const val = target.value;

      target.style.backgroundSize =
        ((val - min) * 100) / (max - min) + "% 100%";

      // Находим ближайший элемент с классом .value среди соседних элементов
      const valueSpan = target.closest(".flex").querySelector(".value");
      valueSpan.textContent = val;

      // Чтоб не рябила консоль
      clearTimeout(timeout);
      timeout = setTimeout(function () {
        const event = new CustomEvent("calculatorFormEvent", {
          detail: {
            values: { name: target.name, value: target.value }, // Элемент, который вы хотите передать
          },
          bubbles: true,
        });
        document.dispatchEvent(event);
      }, 50);
    }

    rangeInputs.forEach((input: any) => {
      input.addEventListener("input", handleInputChange);

      // refresh range from span with number
      const valueSpan = input.closest(".flex").querySelector(".value");
      input.value = valueSpan.textContent;

      const min = input.min;
      const max = input.max;
      const val = input.value;

      input.style.backgroundSize = ((val - min) * 100) / (max - min) + "% 100%";

      console.log(input);
    });
  });
  


  // 
  // 
  // 
  // Функция для бинарного поиска ближайшей мощности, которая больше запрошенного значения
function binarySearchClosestGreater(arr:any, target:number) {
  let left = 0;
  let right = arr.length - 1;
  let closestIndex = -1;

  while (left <= right) {
    let mid = Math.floor((left + right) / 2);

    if (arr[mid].power > target) {
      closestIndex = mid;
      right = mid - 1;
    } else {
      left = mid + 1;
    }
  }

  return closestIndex;
}

// Функция для поиска ближайших радиаторов
// function findClosestRadiators(radiators:any, minPower:number, count:number|undefined, width:number|undefined, height:number|undefined, hygiene:boolean|undefined, side:boolean|undefined) {
function findClosestRadiators(radiators:any, minPower:number) {
  // Используем бинарный поиск для нахождения ближайшей мощности, которая больше запрошенного значения
  let closestIndex = binarySearchClosestGreater(radiators, minPower);
  console.log(`${radiators.lenght} ${minPower}`);
  // Если не найдено радиаторов с мощностью больше запрошенного значения, возвращаем пустой массив
  if (closestIndex === -1) {
    return [];
  }

  // Ограничиваем количество радиаторов до 50, начиная с ближайшего индекса
  let limitedRadiators = [];
  let left = closestIndex;
  let right = closestIndex;

  while (limitedRadiators.length < 50 && (left >= 0 || right < radiators.length)) {
    if (left >= 0 && (right >= radiators.length || radiators[left].power > minPower)) {
      limitedRadiators.push(radiators[left]);
      left--;
    } else if (right < radiators.length && radiators[right].power > minPower) {
      limitedRadiators.push(radiators[right]);
      right++;
    } else {
      break;
    }
  }

  // // Фильтруем ограниченные радиаторы по дополнительным параметрам
  // let filteredRadiators = limitedRadiators.filter(radiator => {
  //   return (
  //     (width === undefined || width === null || radiator.width === width) &&
  //     (height === undefined || height === null || radiator.height === height) &&
  //     (hygiene === undefined || hygiene === null || radiator.hygiene === hygiene) &&
  //     (side === undefined || side === null || radiator.side === side)
  //   );
  // });
  let filteredRadiators = limitedRadiators;
  // Возвращаем ближайшие радиаторы
  let result = [];
  let leftFiltered = 0;
  let rightFiltered = filteredRadiators.length - 1;

  while (result.length < 20 && (leftFiltered <= rightFiltered)) {
    if (Math.abs(filteredRadiators[leftFiltered].power - minPower) <= Math.abs(filteredRadiators[rightFiltered].power - minPower)) {
      result.push(filteredRadiators[leftFiltered]);
      leftFiltered++;
    } else {
      result.push(filteredRadiators[rightFiltered]);
      rightFiltered--;
    }
  }

  return result;
}



// Пример использования
// async function searchHeaters(power:number, heater_count:number, heater_width:number, heater_height:number, heater_hygiene:boolean, heater_side:boolean) {
async function searchHeaters(power:number) {
  try {
    const minPower = power;
    // const count = heater_count||undefined;
    // const width = heater_width||undefined;
    // const height = heater_height||undefined;
    // const hygiene = heater_hygiene||undefined;
    // const side = heater_side||undefined;
    // const closestRadiators = findClosestRadiators(radiators, minPower, count, width, height, hygiene, side);
    const closestRadiators = findClosestRadiators(await radiators, minPower);

    const event = new CustomEvent("heatersSearchComplete", {
          detail: {
            heaters: closestRadiators // Элемент, который вы хотите передать
          },
          bubbles: true,
        });
    document.dispatchEvent(event);
    // console.log(closestRadiators);
  } catch (error) {
    console.error('Error fetching radiators:', error);
  }
}

</script>
