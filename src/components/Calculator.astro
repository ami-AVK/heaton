---
import InputNumber from "./Inputs/InputNumber.astro";
import RadioGroup from "./Inputs/RadioGroup.astro";

// значения кнопок для радиогрупп
const heights = [
  { buttonText: "2,5 м", value: 2.5, checked: true },
  { buttonText: "3 м", value: 3 },
  { buttonText: "3,5 м", value: 3.5 },
];
const insulation = [
  { buttonText: "Плохая", value: 1.5 },
  { buttonText: "Средняя", value: 1.2, checked: true },
  { buttonText: "Хорошая", value: 1.0 },
];
const windows = [
  { buttonText: 1, value: 1 },
  { buttonText: 2, value: 2, checked: true },
  { buttonText: 3, value: 3 },
  { buttonText: 4, value: 4 },
  { buttonText: 5, value: 5 },
];
const glazing = [
  { buttonText: "Одинарное", value: 1.8 },
  { buttonText: "Двойное", value: 1.2, checked: true },
];

const { class: className } = Astro.props;
---

<section class="tracking-wide" class:list={className}>
  <div
    class="flex flex-col items-center w-full gap-10 py-10 sm:gap-16 sm:py-32 container-center text-neutral-600 min-h-svh"
  >
    <h2 class="text-3xl font-semibold md:text-6xl header-circle-sm md:header-circle-lg md:header-circle-xl">Подбор радиаторов</h2>
    <div
      class="flex flex-col items-center w-full gap-0 justify-stretch lg:flex-row md:items-start lg:gap-0 sm:px-0"
    >
    <!-- Меню -->
      <div class="w-full min-w-full p-4 lg:w-72 sm:px-8 md:w-auto md:p-8 sm:min-w-fit bg-secondary/30 rounded-t-3xl lg:rounded-none lg:rounded-l-3xl text-neutral-700">
        <form class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-1 sm:gap-8" id="calculator">
          <div class="relative ">
            <label for="area" class="block mb-1 text-xs font-bold text-gray-700 sm:mb-2 sm:text-sm"
              >Площадь помещения</label
            >
            <div class="flex items-center gap-4">
              <span
                class="left-0 block px-3 py-1 text-lg leading-none text-center rounded-lg top-8 text-neutral-700 min-w-20 whitespace-nowrap bg-neutral-50"
                ><span class="value will-change-contents">15</span> м²</span
              >
              <input
                type="range"
                id="area"
                name="area"
                min="2"
                max="100"
                class="w-full"
                value="70"
              />
            </div>
          </div>
          <div class="">
            <RadioGroup
              header="Высота помещения"
              name="height"
              class="flex-1"
              values={heights}
            />
          </div>
          <div class="">
            <RadioGroup
              header="Теплоизоляция"
              name="insulation"
              class="flex-1"
              values={insulation}
            />
          </div>
          <div class="">
            <RadioGroup
              header="Количество радиаторов"
              name="windows"
              class="flex-1"
              values={windows}
            />
          </div>
          <div class="">
            <RadioGroup
              header="Вид остекления"
              name="glazing"
              class="flex-1"
              values={glazing}
            />
          </div>
          <div class="relative ">
            <label for="area" class="block mb-1 text-xs font-bold text-gray-700 sm:mb-2 sm:text-sm"
              >Минимальная температура</label
            >
            <div class="flex items-center gap-4 ">
              <span
                class="left-0 block px-3 py-1 text-lg leading-none text-center rounded-lg top-8 text-neutral-700 min-w-20 whitespace-nowrap bg-neutral-50"
                ><span class="value will-change-contents">-5</span> °C</span
              >
              <input
                type="range"
                id="temperature"
                name="temperature"
                min="-40"
                max="20"
                class="w-full"
                value="-1"
              />
            </div>
          </div>
          <div class="relative ">
            <label for="area" class="block mb-1 text-xs font-bold text-gray-700 sm:mb-2 sm:text-sm"
              >Желаемая температура в помещении</label
            >
            <div class="flex items-center gap-4 ">
              <span
                class="left-0 block px-3 py-1 text-lg leading-none text-center rounded-lg top-8 text-neutral-700 min-w-20 whitespace-nowrap bg-neutral-50"
                ><span class="value will-change-contents">21</span> °C</span
              >
              <input
                type="range"
                id="homeTemperature"
                name="homeTemperature"
                min="0"
                max="40"
                class="w-full"
                value="21"
              />
            </div>
          </div>
        </form>
      </div>

      <div class="p-4 lg:flex-auto sm:p-8 sm:w-auto bg-neutral-50 rounded-b-3xl lg:rounded-none lg:rounded-r-3xl ">
        <div class="flex flex-col flex-wrap px-2 font-black sm:gap-2 sm:flex-row sm:items-center"><span class="block mb-1 text-xs font-black leading-none text-gray-700 sm:mb-0 sm:text-lg">Рекомендуемая общая мощность: </span><span id="totalPower" class="block px-2 text-lg rounded-full will-change-contents bg-secondary">1800 кВт</span></div>
        <form action="" id="calculatorExtra" name="calculatorExtra" class="flex flex-wrap gap-6 px-2 py-4 -mx-2.5 text-neutral-600">
            <div class="">
              <label class="block pl-2.5 mr-2.5 mb-1 text-xs font-bold text-gray-700 sm:mb-2 sm:text-sm">Длина радиатора</label
            >
              <select name="lenght" class=" w-full block py-1 mt-0.5 border-transparent rounded-lg border-none bg-neutral-50/60 focus:border-gray-500 focus:bg-white ring-0 focus:ring-0">
                {["Неважно",400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900, 3000].map((height:number|string)=>
                  (
                    <option>{height}</option>
                  )
                  )}
              </select>
            </div>
            <div class="">
              <label class="pl-2.5 mr-2.5 block mb-1 text-xs font-bold text-gray-700 sm:mb-2 sm:text-sm">Высота радиатора</label
            >
              <select name="height" class="w-full block py-1 mt-0.5 border-transparent rounded-lg border-none bg-neutral-50/60 focus:border-gray-500 focus:bg-white ring-0 focus:ring-0">
                {["Неважно",300, 400, 500, 600, 900].map((height:number|string)=>
                  (
                    <option>{height}</option>
                  )
                )}
              </select>
            </div>
            <div class="">
              <label class="pl-2.5 mr-2.5 block mb-1 text-xs font-bold text-gray-700 sm:mb-2 sm:text-sm">Тип подключения</label
            >
              <select name="connectionSide" class="w-full block py-1 mt-0.5 border-transparent rounded-lg border-none bg-neutral-50/60 focus:border-gray-500 focus:bg-white ring-0 focus:ring-0">
                {["Неважно","Боковое","Нижнее"].map((height:number|string)=>
                  (
                    <option>{height}</option>
                  )
                )}
              </select>
            </div>
            <div class="">
              <label class="pl-2.5 mr-2.5 block mb-1 text-xs font-bold text-gray-700 sm:mb-2 sm:text-sm">Вид радиатора</label
            >
              <select name="typeOfHeater" class="w-full block py-1 mt-0.5 border-transparent border-none bg-neutral-50/60 rounded-lg  focus:border-gray-500 focus:bg-white ring-0 focus:ring-0">
                {["Неважно","Гигиенический","Стандартный"].map((height:number|string)=>
                  (
                    <option>{height}</option>
                  )
                )}
              </select>
            </div>
        </form>
        <h3 class="block my-6 mt-4 text-xs font-bold font-black leading-none text-gray-700 sm:text-lg sm:px-2">Список подходящих радиаторов:</h3>

        <!-- Heaters list -->
        <ul class="flex flex-col gap-4 overflow-y-scroll text-xl max-h-[420px] will-change-contents" id="outputField">
          <li class="flex items-center gap-2 p-2 cursor-pointer sm:gap-8 rounded-xl hover:bg-neutral-100">
            <div class="flex flex-col items-start grow">
              <div class="font-black">C 33 300x400</div>
              <ul class="flex items-center gap-1">
                <li class="px-1 sm:px-2 py-0.5 text-xs rounded-full output_power_badge bg-secondary/30 power whitespace-nowrap">1239 Вт</li>
                <li class="px-1 sm:px-2 py-0.5 text-xs rounded-full output_power_badge bg-neutral-50/30 border border-neutral-300 connection">Нижнее</li>
                <li class="px-1 sm:px-2 py-0.5 text-xs rounded-full output_power_badge bg-neutral-50/30 border border-neutral-300 type empty:hidden"></li>
              </ul>
            </div>
            <div class="flex items-center gap-4 text-neutral-700/30">
              <div class="font-black">
                <span class="text-xl">x</span>
              </div>
              <div class="font-black ">
                <span class="text-4xl">2</span><span>&nbsp;шт</span>
              </div>
            </div>
          </li>
        </ul>
      </div>
    </div>
  </div>
</section>
<script>
  
const radiators = await fetchRadiators();

// Функция для загрузки данных о радиаторах
async function fetchRadiators() {

  const response = await fetch('/heaton/search_map_radiator_power.json'); // Замените на ваш URL
  if (!response.ok) {
    throw new Error('Fail to fetch heaters powers');
  }
  const data = await response.json();
  // console.log(`Fetched ${data.length}`);
  return data;
}



function calculateHeatLoss(
    area: number,
    height: number,
    insulationFactor: number,
    glazingFactor: number,
    minTemp: number,
    homeTemp: number,
  ) {
    const heatLoss =
      area * height * insulationFactor * glazingFactor * (homeTemp - minTemp);
    return heatLoss;
  }
function initCalculator(form: HTMLFormElement) {

    const calculatorExtra = document.querySelector('#calculatorExtra') as HTMLFormElement;

    let extraFilterData = {};
    if(calculatorExtra){
      const lenght = calculatorExtra.querySelector('select[name="lenght"]') as HTMLSelectElement;
      const height_heater = calculatorExtra.querySelector('select[name="height"]') as HTMLSelectElement;
      const connectionSide = calculatorExtra.querySelector('select[name="connectionSide"]') as HTMLSelectElement;
      const typeOfHeater = calculatorExtra.querySelector('select[name="typeOfHeater"]') as HTMLSelectElement;
      extraFilterData = {
        "lenght":lenght.selectedIndex===0?null:parseInt(lenght.value),
        "height":height_heater.selectedIndex===0?null:parseInt(height_heater.value),
        "isSide":connectionSide.selectedIndex===0?null:connectionSide.selectedIndex===1,
        "isHygiene":typeOfHeater.selectedIndex===0?null:typeOfHeater.selectedIndex===1,
      };
    }

    const area = form.querySelector('input[name="area"]') as HTMLInputElement;
    const temperature = form.querySelector('input[name="temperature"]') as HTMLInputElement;
    const homeTemperature = form.querySelector('input[name="homeTemperature"]') as HTMLInputElement;
    const insulation = form.querySelector('input[name="insulation"]:checked') as HTMLInputElement;
    const windows = form.querySelector('input[name="windows"]:checked') as HTMLInputElement;
    const glazing = form.querySelector('input[name="glazing"]:checked') as HTMLInputElement;
    const height = form.querySelector('input[name="height"]:checked') as HTMLInputElement;

    const heatLoss = calculateHeatLoss(
      parseFloat(area.value),
      parseFloat(height.value),
      parseFloat(insulation.value),
      parseFloat(glazing.value),
      parseFloat(temperature.value),
      parseFloat(homeTemperature.value),
    );

    const event = new CustomEvent("calculatorFormHeatPower", {
          detail: {
            heat: heatLoss, count: parseInt(windows.value), extra:extraFilterData // Элемент, который вы хотите передать
          },
          bubbles: true,
        });
    document.dispatchEvent(event);
    
    // console.log(`${heatLoss} Вт`);
    // console.log(
    //   `${Math.ceil(heatLoss / parseInt(windows.value))} Вт на каждый радиатор`
    // );
  }
  document.addEventListener("astro:page-load", () => {
    const extraFilterInputs = document.querySelectorAll('#calculatorExtra select');
    extraFilterInputs.forEach(input => {
			  input.addEventListener('change', (e:any)=>{
                const event = new CustomEvent('calculatorFormEvent', {
                    bubbles:true
                });
                document.dispatchEvent(event);
            })
			})
    const form = document.getElementById("calculator") as HTMLFormElement;
    initCalculator(form);

    document.addEventListener("calculatorFormEvent", (e: any) => {
      initCalculator(form);
    });

    // Поиск радиаторов завершен
    document.addEventListener("heatersSearchComplete",(e: any) => {
      const outputField = document.getElementById("outputField") as HTMLUListElement;
      const heatersArray = e.detail.heaters;
      let totalInner = "";
      heatersArray.forEach((element:any,index:number)=>{
        console.log(element);
        totalInner+=
        `<li class="flex items-center gap-2 p-2 cursor-pointer sm:gap-8 rounded-xl hover:bg-neutral-100">
                    <a href="/heaton/${element.url}" class="flex flex-col items-start grow">
                      <div class="font-black">${element.name}</div>
                      <ul class="flex items-center gap-1">
                        <li class="px-1 sm:px-2 py-0.5 text-xs rounded-full output_power_badge bg-secondary/30 power whitespace-nowrap">${element.power} Вт</li>
                        <li class="px-1 sm:px-2 py-0.5 text-xs rounded-full output_power_badge bg-neutral-50/30 border border-neutral-300 connection">${element.side?"Боковое":"Нижнее"}</li>
                        <li class="px-1 sm:px-2 py-0.5 text-xs rounded-full output_power_badge bg-neutral-50/30 border border-neutral-300 type empty:hidden">${element.hygiene?"Гигиенический":""}</li>
                      </ul>
                    </a>
                    <a class="flex items-center gap-4 text-neutral-700/30">
                      <div class="font-black">
                        <span class="text-xl">x</span>
                      </div>
                      <div class="font-black ">
                        <span class="text-4xl">2</span><span>&nbsp;шт</span>
                      </div>
                    </a>
          </li>`
      });
      
                  
        outputField.innerHTML = totalInner;
    });

    document.addEventListener("calculatorFormHeatPower", (e: any) => {

      const totalPower = document.getElementById("totalPower") as HTMLSpanElement;

      const totalPowerValue = parseInt(e.detail.heat);
      const heatersCount= parseInt(e.detail.count);

      // Обновляем вывод общей теплоотдачи
      totalPower.textContent = `${totalPowerValue} Вт`;

      // Запрашиваем поиск радиатора по списку, в первом параметре искомая теплоотдача на один радиатор, во втором дополнительная фильтрация
      searchHeaters(Math.ceil(totalPowerValue/heatersCount),e.detail.extra);
    });

    const rangeInputs = document.querySelectorAll('input[type="range"]');
    
    // инициализируем отсечку и заодно запускаем калькулятор на расчет в первый раз
    let timeout = setTimeout(function () {
      rangeInputs[0].dispatchEvent(new Event('input', { bubbles: true }));
    }, 200);

    function handleInputChange(e: any) {
      let target = e.target;
      if (e.target.type !== "range") {
        target = document.getElementById("range");
      }
      const min = target.min;
      const max = target.max;
      const val = target.value;

      target.style.backgroundSize =
        ((val - min) * 100) / (max - min) + "% 100%";

      // Находим ближайший элемент с классом .value среди соседних элементов
      const valueSpan = target.closest(".flex").querySelector(".value");
      valueSpan.textContent = val;

      // Добавим здравую отсечку, чтобы не считать каждое движение
      clearTimeout(timeout);
      timeout = setTimeout(function () {
        const event = new CustomEvent("calculatorFormEvent", {
          detail: {
            values: { name: target.name, value: target.value },
          },
          bubbles: true,
        });
        document.dispatchEvent(event);
      }, 50);
    }

    rangeInputs.forEach((input: any) => {
      input.addEventListener("input", handleInputChange);

      // Находим ближайшин спан с классом value, и кидаем в него значения ползунка
      const valueSpan = input.closest(".flex").querySelector(".value");
      input.value = valueSpan.textContent;

      const min = input.min;
      const max = input.max;
      const val = input.value;

      input.style.backgroundSize = ((val - min) * 100) / (max - min) + "% 100%";
    });
  });


// Функция для бинарного поиска ближайшей мощности, которая больше запрошенного значения
function binarySearchClosestGreater(arr:any, target:number) {
  let left = 0;
  let right = arr.length - 1;
  let closestIndex = -1;

  while (left <= right) {
    let mid = Math.floor((left + right) / 2);

    if (arr[mid].power > target) {
      closestIndex = mid;
      right = mid - 1;
    } else {
      left = mid + 1;
    }
  }

  return closestIndex;
}

// Функция для поиска ближайших радиаторов
function findClosestRadiators(radiators: any, minPower: number, extraFilters?: any) {

  // Используем бинарный поиск для нахождения ближайшей мощности, которая больше запрошенного значения
  let closestIndex = binarySearchClosestGreater(radiators, minPower);
  console.log(`${radiators.lenght} ${minPower}`);

  // Если не найдено радиаторов с мощностью больше запрошенного значения, возвращаем пустой массив
  if (closestIndex === -1) {
    return [];
  }

  // Ограничиваем количество радиаторов до 50, начиная с ближайшего индекса
  let limitedRadiators = [];
  let left = closestIndex;
  let right = closestIndex;

  while (limitedRadiators.length < 100 && (left >= 0 || right < radiators.length)) {
    if (left >= 0 && (right >= radiators.length || radiators[left].power > minPower)) {
      limitedRadiators.push(radiators[left]);
      left--;
    } else if (right < radiators.length && radiators[right].power > minPower) {
      limitedRadiators.push(radiators[right]);
      right++;
    } else {
      break;
    }
  }

  // Жестко фильтруем ограниченные радиаторы по дополнительным параметрам
  let filteredRadiators = limitedRadiators.filter(radiator => {
    return (
      (extraFilters.lenght === 0 || extraFilters.lenght === undefined || extraFilters.lenght === null || radiator.width === extraFilters.lenght) &&
      (extraFilters.height === 0 || extraFilters.height === undefined || extraFilters.height === null || radiator.height === extraFilters.height) &&
      (extraFilters.isSide === 0 || extraFilters.isSide === undefined || extraFilters.isSide === null || radiator.side === extraFilters.isSide) &&
      (extraFilters.isHygiene === 0 || extraFilters.isHygiene === undefined || extraFilters.isHygiene === null || radiator.hygiene === extraFilters.isHygiene) 
    );
  });
  
  // Возвращаем ближайшие радиаторы
  let result = [];
  let leftFiltered = 0;
  let rightFiltered = filteredRadiators.length - 1;

  while (result.length < 20 && (leftFiltered <= rightFiltered)) {
    if (Math.abs(filteredRadiators[leftFiltered].power - minPower) <= Math.abs(filteredRadiators[rightFiltered].power - minPower)) {
      result.push(filteredRadiators[leftFiltered]);
      leftFiltered++;
    } else {
      result.push(filteredRadiators[rightFiltered]);
      rightFiltered--;
    }
  }

  return result;
}

async function searchHeaters(power:number, extraFilters:any) {
  try {
    const minPower = power;
    const closestRadiators = findClosestRadiators(await radiators, minPower, extraFilters);
    const event = new CustomEvent("heatersSearchComplete", {
          detail: {
            heaters: closestRadiators // Элемент, который вы хотите передать
          },
          bubbles: true,
        });
    document.dispatchEvent(event);
    // console.log(closestRadiators);
  } catch (error) {
    console.error('Error fetching radiators:', error);
  }
}

</script>
