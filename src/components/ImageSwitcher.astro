---
import { Icon } from "astro-icon/components";
import ImageDynamic from "./ImageDynamic.astro";

interface ImageOption {
    title: string;
    image: string;
    options?: {
        color: string;
        name: string;
    }[];
}

interface Props {
    images: ImageOption[];
    class?: string;
}

const { images, class: className } = Astro.props;
---

<div class:list={["relative overflow-hidden rounded-xl", className]}>
    <h2 class="text-3xl font-bold mx-auto mb-16 absolute z-50 left-0 right-0 text-center mt-16 uppercase tracking-wider text-neutral-700">
        Варианты аннодирования
    </h2>
    <div class="relative w-full h-[80vh] md:h-full">
        {images.map((image, index) => (
            <div 
                class="absolute inset-0 transition-opacity duration-300" 
                data-image={index}
                data-active={index === 0}
                style={{
                    opacity: index === 0 ? '1' : '0',
                }}
            >
                <ImageDynamic 
                    imagePath={`/src/images/products/${image.image}`}
                    altText={image.title}
                    class="w-full h-full object-cover"
                />
            </div>
        ))}
    </div>

    <!-- Controls -->
    <div class="absolute bottom-4 left-1/2 -translate-x-1/2 flex gap-2">
        {images.map((image, index) => (
            <button 
                class="px-3 py-1 bg-neutral-50/80 rounded-lg text-sm font-medium hover:bg-primary hover:text-neutral-50 transition-colors"
                data-button={index}
                data-active={index === 0}
            >
                {image.title}
            </button>
        ))}
    </div>

    <!-- RAL Color Picker -->
    <div 
        class="absolute inset-0 bg-neutral-50/80 backdrop-blur-sm transition-transform translate-y-full"
        data-ral-picker
    >
        <div class="h-full overflow-auto p-4">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-bold">RAL Colors</h3>
                <button data-close-ral class="p-2 hover:text-primary">
                    <Icon name="X" class="w-6 h-6"/>
                </button>
            </div>
            <div class="grid grid-cols-4 gap-2">
                {images.find(img => img.title === "RAL")?.options?.map(color => (
                    <button
                        class="p-2 text-sm rounded hover:bg-neutral-100 text-left"
                        data-ral={color.color}
                    >
                        <div class="w-full h-8 rounded mb-1" style={`background-color: ${color.color};`}></div>
                        {color.name}
                    </button>
                ))}
            </div>
        </div>
    </div>
</div>

<script>
    function setupImageSwitcher() {
        const switchers = document.querySelectorAll('.relative.overflow-hidden');
        
        switchers.forEach(switcher => {
            const imageContainer = switcher.querySelector('.relative.w-full');
            const images = switcher.querySelectorAll('[data-image]');
            const buttons = switcher.querySelectorAll('[data-button]');
            const ralPicker = switcher.querySelector('[data-ral-picker]');
            const closeRalBtn = switcher.querySelector('[data-close-ral]');
            const ralButtons = switcher.querySelectorAll('[data-ral]');

            buttons.forEach(button => {
                button.addEventListener('click', () => {
                    const index = button.getAttribute('data-button');
                    const isRal = button.textContent?.trim() === 'RAL';

                    if (isRal) {
                        ralPicker?.classList.remove('translate-y-full');
                    } else {
                        // Reset all images and buttons
                        images.forEach(img => {
                            img.style.opacity = '0';
                        });
                        buttons.forEach(btn => {
                            btn.dataset.active = 'false';
                        });

                        // Activate selected image and button
                        const targetImage = switcher.querySelector(`[data-image="${index}"]`);
                        if (targetImage) {
                            targetImage.style.opacity = '1';
                        }
                        button.dataset.active = 'true';
                    }
                });
            });

            closeRalBtn?.addEventListener('click', () => {
                ralPicker?.classList.add('translate-y-full');
            });

            ralButtons?.forEach(button => {
                button.addEventListener('click', () => {
                    const color = button.getAttribute('data-ral');
                    if (color) {
                        imageContainer.style.backgroundColor = color;
                    }
                });
            });
        });
    }

    // Setup on initial load
    setupImageSwitcher();

    // Setup on view transitions
    document.addEventListener('astro:page-load', setupImageSwitcher);
</script>

<!-- <style>
    [data-active="true"] {
        @apply bg-primary text-neutral-50;
    }
</style> -->